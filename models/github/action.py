# generated by datamodel-codegen:
#   filename:  github-action.json
#   timestamp: 2025-06-25T22:15:05+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Literal, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, constr


class Inputs(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: str = Field(
        ..., description='A string description of the input parameter.'
    )
    deprecationMessage: Optional[str] = Field(
        None, description='A string shown to users using the deprecated input.'
    )
    required: Optional[bool] = Field(
        None,
        description='A boolean to indicate whether the action requires the input parameter. Set to `true` when the parameter is required.',
    )
    default: Optional[str] = Field(
        None,
        description="A string representing the default value. The default value is used when an input parameter isn't specified in a workflow file.",
    )


class Color(Enum):
    white = 'white'
    black = 'black'
    yellow = 'yellow'
    blue = 'blue'
    green = 'green'
    orange = 'orange'
    red = 'red'
    purple = 'purple'
    gray_dark = 'gray-dark'


class Icon(Enum):
    activity = 'activity'
    airplay = 'airplay'
    alert_circle = 'alert-circle'
    alert_octagon = 'alert-octagon'
    alert_triangle = 'alert-triangle'
    align_center = 'align-center'
    align_justify = 'align-justify'
    align_left = 'align-left'
    align_right = 'align-right'
    anchor = 'anchor'
    aperture = 'aperture'
    archive = 'archive'
    arrow_down_circle = 'arrow-down-circle'
    arrow_down_left = 'arrow-down-left'
    arrow_down_right = 'arrow-down-right'
    arrow_down = 'arrow-down'
    arrow_left_circle = 'arrow-left-circle'
    arrow_left = 'arrow-left'
    arrow_right_circle = 'arrow-right-circle'
    arrow_right = 'arrow-right'
    arrow_up_circle = 'arrow-up-circle'
    arrow_up_left = 'arrow-up-left'
    arrow_up_right = 'arrow-up-right'
    arrow_up = 'arrow-up'
    at_sign = 'at-sign'
    award = 'award'
    bar_chart_2 = 'bar-chart-2'
    bar_chart = 'bar-chart'
    battery_charging = 'battery-charging'
    battery = 'battery'
    bell_off = 'bell-off'
    bell = 'bell'
    bluetooth = 'bluetooth'
    bold = 'bold'
    book_open = 'book-open'
    book = 'book'
    bookmark = 'bookmark'
    box = 'box'
    briefcase = 'briefcase'
    calendar = 'calendar'
    camera_off = 'camera-off'
    camera = 'camera'
    cast = 'cast'
    check_circle = 'check-circle'
    check_square = 'check-square'
    check = 'check'
    chevron_down = 'chevron-down'
    chevron_left = 'chevron-left'
    chevron_right = 'chevron-right'
    chevron_up = 'chevron-up'
    chevrons_down = 'chevrons-down'
    chevrons_left = 'chevrons-left'
    chevrons_right = 'chevrons-right'
    chevrons_up = 'chevrons-up'
    circle = 'circle'
    clipboard = 'clipboard'
    clock = 'clock'
    cloud_drizzle = 'cloud-drizzle'
    cloud_lightning = 'cloud-lightning'
    cloud_off = 'cloud-off'
    cloud_rain = 'cloud-rain'
    cloud_snow = 'cloud-snow'
    cloud = 'cloud'
    code = 'code'
    command = 'command'
    compass = 'compass'
    copy = 'copy'
    corner_down_left = 'corner-down-left'
    corner_down_right = 'corner-down-right'
    corner_left_down = 'corner-left-down'
    corner_left_up = 'corner-left-up'
    corner_right_down = 'corner-right-down'
    corner_right_up = 'corner-right-up'
    corner_up_left = 'corner-up-left'
    corner_up_right = 'corner-up-right'
    cpu = 'cpu'
    credit_card = 'credit-card'
    crop = 'crop'
    crosshair = 'crosshair'
    database = 'database'
    delete = 'delete'
    disc = 'disc'
    dollar_sign = 'dollar-sign'
    download_cloud = 'download-cloud'
    download = 'download'
    droplet = 'droplet'
    edit_2 = 'edit-2'
    edit_3 = 'edit-3'
    edit = 'edit'
    external_link = 'external-link'
    eye_off = 'eye-off'
    eye = 'eye'
    fast_forward = 'fast-forward'
    feather = 'feather'
    file_minus = 'file-minus'
    file_plus = 'file-plus'
    file_text = 'file-text'
    file = 'file'
    film = 'film'
    filter = 'filter'
    flag = 'flag'
    folder_minus = 'folder-minus'
    folder_plus = 'folder-plus'
    folder = 'folder'
    gift = 'gift'
    git_branch = 'git-branch'
    git_commit = 'git-commit'
    git_merge = 'git-merge'
    git_pull_request = 'git-pull-request'
    globe = 'globe'
    grid = 'grid'
    hard_drive = 'hard-drive'
    hash = 'hash'
    headphones = 'headphones'
    heart = 'heart'
    help_circle = 'help-circle'
    home = 'home'
    image = 'image'
    inbox = 'inbox'
    info = 'info'
    italic = 'italic'
    layers = 'layers'
    layout = 'layout'
    life_buoy = 'life-buoy'
    link_2 = 'link-2'
    link = 'link'
    list = 'list'
    loader = 'loader'
    lock = 'lock'
    log_in = 'log-in'
    log_out = 'log-out'
    mail = 'mail'
    map_pin = 'map-pin'
    map = 'map'
    maximize_2 = 'maximize-2'
    maximize = 'maximize'
    menu = 'menu'
    message_circle = 'message-circle'
    message_square = 'message-square'
    mic_off = 'mic-off'
    mic = 'mic'
    minimize_2 = 'minimize-2'
    minimize = 'minimize'
    minus_circle = 'minus-circle'
    minus_square = 'minus-square'
    minus = 'minus'
    monitor = 'monitor'
    moon = 'moon'
    more_horizontal = 'more-horizontal'
    more_vertical = 'more-vertical'
    move = 'move'
    music = 'music'
    navigation_2 = 'navigation-2'
    navigation = 'navigation'
    octagon = 'octagon'
    package = 'package'
    paperclip = 'paperclip'
    pause_circle = 'pause-circle'
    pause = 'pause'
    percent = 'percent'
    phone_call = 'phone-call'
    phone_forwarded = 'phone-forwarded'
    phone_incoming = 'phone-incoming'
    phone_missed = 'phone-missed'
    phone_off = 'phone-off'
    phone_outgoing = 'phone-outgoing'
    phone = 'phone'
    pie_chart = 'pie-chart'
    play_circle = 'play-circle'
    play = 'play'
    plus_circle = 'plus-circle'
    plus_square = 'plus-square'
    plus = 'plus'
    pocket = 'pocket'
    power = 'power'
    printer = 'printer'
    radio = 'radio'
    refresh_ccw = 'refresh-ccw'
    refresh_cw = 'refresh-cw'
    repeat = 'repeat'
    rewind = 'rewind'
    rotate_ccw = 'rotate-ccw'
    rotate_cw = 'rotate-cw'
    rss = 'rss'
    save = 'save'
    scissors = 'scissors'
    search = 'search'
    send = 'send'
    server = 'server'
    settings = 'settings'
    share_2 = 'share-2'
    share = 'share'
    shield_off = 'shield-off'
    shield = 'shield'
    shopping_bag = 'shopping-bag'
    shopping_cart = 'shopping-cart'
    shuffle = 'shuffle'
    sidebar = 'sidebar'
    skip_back = 'skip-back'
    skip_forward = 'skip-forward'
    slash = 'slash'
    sliders = 'sliders'
    smartphone = 'smartphone'
    speaker = 'speaker'
    square = 'square'
    star = 'star'
    stop_circle = 'stop-circle'
    sun = 'sun'
    sunrise = 'sunrise'
    sunset = 'sunset'
    table = 'table'
    tablet = 'tablet'
    tag = 'tag'
    target = 'target'
    terminal = 'terminal'
    thermometer = 'thermometer'
    thumbs_down = 'thumbs-down'
    thumbs_up = 'thumbs-up'
    toggle_left = 'toggle-left'
    toggle_right = 'toggle-right'
    trash_2 = 'trash-2'
    trash = 'trash'
    trending_down = 'trending-down'
    trending_up = 'trending-up'
    triangle = 'triangle'
    truck = 'truck'
    tv = 'tv'
    type = 'type'
    umbrella = 'umbrella'
    underline = 'underline'
    unlock = 'unlock'
    upload_cloud = 'upload-cloud'
    upload = 'upload'
    user_check = 'user-check'
    user_minus = 'user-minus'
    user_plus = 'user-plus'
    user_x = 'user-x'
    user = 'user'
    users = 'users'
    video_off = 'video-off'
    video = 'video'
    voicemail = 'voicemail'
    volume_1 = 'volume-1'
    volume_2 = 'volume-2'
    volume_x = 'volume-x'
    volume = 'volume'
    watch = 'watch'
    wifi_off = 'wifi-off'
    wifi = 'wifi'
    wind = 'wind'
    x_circle = 'x-circle'
    x_square = 'x-square'
    x = 'x'
    zap_off = 'zap-off'
    zap = 'zap'
    zoom_in = 'zoom-in'
    zoom_out = 'zoom-out'


class Branding(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    color: Optional[Color] = Field(
        None, description='The background color of the badge.'
    )
    icon: Optional[Icon] = Field(
        None, description='The name of the Feather icon to use.'
    )


class ExpressionSyntax(RootModel[constr(pattern=r'^\$\{\{(.|[\r\n])*\}\}$')]):
    root: constr(pattern=r'^\$\{\{(.|[\r\n])*\}\}$')


class StringContainingExpressionSyntax(
    RootModel[constr(pattern=r'^.*\$\{\{(.|[\r\n])*\}\}.*$')]
):
    root: constr(pattern=r'^.*\$\{\{(.|[\r\n])*\}\}.*$')


class PreIf(RootModel[str]):
    root: str = Field(
        ...,
        description='Allows you to define conditions for the `pre:` action execution. The `pre:` action will only run if the conditions in `pre-if` are met. If not set, then `pre-if` defaults to `always()`. Note that the `step` context is unavailable, as no steps have run yet.',
    )


class PostIf(RootModel[str]):
    root: str = Field(
        ...,
        description='Allows you to define conditions for the `post:` action execution. The `post:` action will only run if the conditions in `post-if` are met. If not set, then `post-if` defaults to `always()`.',
    )


class Using(Enum):
    node12 = 'node12'
    node16 = 'node16'
    node20 = 'node20'


class RunsJavascript(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    using: Using = Field(
        ..., description='The application used to execute the code specified in `main`.'
    )
    main: str = Field(
        ...,
        description='The file that contains your action code. The application specified in `using` executes this file.',
    )
    pre: Optional[str] = Field(
        None,
        description='Allows you to run a script at the start of a job, before the `main:` action begins. For example, you can use `pre:` to run a prerequisite setup script. The application specified with the `using` syntax will execute this file. The `pre:` action always runs by default but you can override this using `pre-if`.',
    )
    pre_if: Optional[PreIf] = Field(None, alias='pre-if')
    post: Optional[str] = Field(
        None,
        description='Allows you to run a script at the end of a job, once the `main:` action has completed. For example, you can use `post:` to terminate certain processes or remove unneeded files. The application specified with the `using` syntax will execute this file. The `post:` action always runs by default but you can override this using `post-if`.',
    )
    post_if: Optional[PostIf] = Field(None, alias='post-if')


class Shell(Enum):
    bash = 'bash'
    pwsh = 'pwsh'
    python = 'python'
    sh = 'sh'
    cmd = 'cmd'
    powershell = 'powershell'


class Steps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    run: str = Field(
        ...,
        description='The command you want to run. This can be inline or a script in your action repository.',
    )
    shell: Union[str, Shell] = Field(
        ..., description='The shell where you want to run the command.'
    )
    uses: Optional[str] = Field(
        None, description='Selects an action to run as part of a step in your job.'
    )
    with_: Optional[Dict[str, Any]] = Field(
        None,
        alias='with',
        description='A map of the input parameters defined by the action. Each input parameter is a key/value pair. Input parameters are set as environment variables. The variable is prefixed with INPUT_ and converted to upper case.',
    )
    name: Optional[str] = Field(None, description='The name of the composite run step.')
    id: Optional[str] = Field(
        None,
        description='A unique identifier for the step. You can use the `id` to reference the step in contexts.',
    )
    if_: Optional[str] = Field(
        None,
        alias='if',
        description='You can use the if conditional to prevent a step from running unless a condition is met. You can use any supported context and expression to create a conditional.\nExpressions in an if conditional do not require the ${{ }} syntax. For more information, see https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions.',
    )
    env: Optional[
        Union[Dict[str, Union[str, float, bool]], StringContainingExpressionSyntax]
    ] = Field(
        None, description='Sets a map of environment variables for only that step.'
    )
    continue_on_error: Optional[Union[bool, ExpressionSyntax]] = Field(
        False,
        alias='continue-on-error',
        description='Prevents a job from failing when a step fails. Set to true to allow a job to pass when this step fails.',
    )
    working_directory: Optional[str] = Field(
        None,
        alias='working-directory',
        description='Specifies the working directory where the command is run.',
    )


class Steps1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    run: Optional[str] = Field(
        None,
        description='The command you want to run. This can be inline or a script in your action repository.',
    )
    shell: Optional[Union[str, Shell]] = Field(
        None, description='The shell where you want to run the command.'
    )
    uses: str = Field(
        ..., description='Selects an action to run as part of a step in your job.'
    )
    with_: Optional[Dict[str, Any]] = Field(
        None,
        alias='with',
        description='A map of the input parameters defined by the action. Each input parameter is a key/value pair. Input parameters are set as environment variables. The variable is prefixed with INPUT_ and converted to upper case.',
    )
    name: Optional[str] = Field(None, description='The name of the composite run step.')
    id: Optional[str] = Field(
        None,
        description='A unique identifier for the step. You can use the `id` to reference the step in contexts.',
    )
    if_: Optional[str] = Field(
        None,
        alias='if',
        description='You can use the if conditional to prevent a step from running unless a condition is met. You can use any supported context and expression to create a conditional.\nExpressions in an if conditional do not require the ${{ }} syntax. For more information, see https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions.',
    )
    env: Optional[
        Union[Dict[str, Union[str, float, bool]], StringContainingExpressionSyntax]
    ] = Field(
        None, description='Sets a map of environment variables for only that step.'
    )
    continue_on_error: Optional[Union[bool, ExpressionSyntax]] = Field(
        False,
        alias='continue-on-error',
        description='Prevents a job from failing when a step fails. Set to true to allow a job to pass when this step fails.',
    )
    working_directory: Optional[str] = Field(
        None,
        alias='working-directory',
        description='Specifies the working directory where the command is run.',
    )


class RunsComposite(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    using: Literal['composite'] = Field(
        ..., description="To use a composite run steps action, set this to 'composite'."
    )
    steps: List[Union[Steps, Steps1]] = Field(
        ..., description='The run steps that you plan to run in this action.'
    )


class RunsDocker(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    using: Literal['docker'] = Field(
        ..., description="You must set this value to 'docker'."
    )
    image: str = Field(
        ...,
        description='The Docker image to use as the container to run the action. The value can be the Docker base image name, a local `Dockerfile` in your repository, or a public image in Docker Hub or another registry. To reference a `Dockerfile` local to your repository, use a path relative to your action metadata file. The `docker` application will execute this file.',
    )
    env: Optional[
        Union[Dict[str, Union[str, float, bool]], StringContainingExpressionSyntax]
    ] = Field(
        None,
        description='Specifies a key/value map of environment variables to set in the container environment.',
    )
    entrypoint: Optional[str] = Field(
        None,
        description="Overrides the Docker `ENTRYPOINT` in the `Dockerfile`, or sets it if one wasn't already specified. Use `entrypoint` when the `Dockerfile` does not specify an `ENTRYPOINT` or you want to override the `ENTRYPOINT` instruction. If you omit `entrypoint`, the commands you specify in the Docker `ENTRYPOINT` instruction will execute. The Docker `ENTRYPOINT instruction has a *shell* form and *exec* form. The Docker `ENTRYPOINT` documentation recommends using the *exec* form of the `ENTRYPOINT` instruction.",
    )
    pre_entrypoint: Optional[str] = Field(
        None,
        alias='pre-entrypoint',
        description='Allows you to run a script before the `entrypoint` action begins. For example, you can use `pre-entrypoint:` to run a prerequisite setup script. GitHub Actions uses `docker run` to launch this action, and runs the script inside a new container that uses the same base image. This means that the runtime state is different from the main `entrypoint` container, and any states you require must be accessed in either the workspace, `HOME`, or as a `STATE_` variable. The `pre-entrypoint:` action always runs by default but you can override this using `pre-if`.',
    )
    pre_if: Optional[PreIf] = Field(None, alias='pre-if')
    post_entrypoint: Optional[str] = Field(
        None,
        alias='post-entrypoint',
        description='Allows you to run a cleanup script once the `runs.entrypoint` action has completed. GitHub Actions uses `docker run` to launch this action. Because GitHub Actions runs the script inside a new container using the same base image, the runtime state is different from the main `entrypoint` container. You can access any state you need in either the workspace, `HOME`, or as a `STATE_` variable. The `post-entrypoint:` action always runs by default but you can override this using `post-if`.',
    )
    post_if: Optional[PostIf] = Field(None, alias='post-if')
    args: Optional[List[str]] = Field(
        None,
        description="An array of strings that define the inputs for a Docker container. Inputs can include hardcoded strings. GitHub passes the `args` to the container's `ENTRYPOINT` when the container starts up.\nThe `args` are used in place of the `CMD` instruction in a `Dockerfile`. If you use `CMD` in your `Dockerfile`, use the guidelines ordered by preference:\n- Document required arguments in the action's README and omit them from the `CMD` instruction.\n- Use defaults that allow using the action without specifying any `args`.\n- If the action exposes a `--help` flag, or something similar, use that to make your action self-documenting.",
    )


class Outputs(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: str = Field(
        ..., description='A string description of the output parameter.'
    )


class Outputs1(RootModel[Dict[constr(pattern=r'^[_a-zA-Z][a-zA-Z0-9_-]*$'), Outputs]]):
    root: Dict[constr(pattern=r'^[_a-zA-Z][a-zA-Z0-9_-]*$'), Outputs] = Field(
        ...,
        description="Output parameters allow you to declare data that an action sets. Actions that run later in a workflow can use the output data set in previously run actions. For example, if you had an action that performed the addition of two inputs (x + y = z), the action could output the sum (z) for other actions to use as an input.\nIf you don't declare an output in your action metadata file, you can still set outputs and use them in a workflow.",
    )


class OutputsComposite(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: str = Field(
        ..., description='A string description of the output parameter.'
    )
    value: str = Field(
        ...,
        description='The value that the output parameter will be mapped to. You can set this to a string or an expression with context. For example, you can use the steps context to set the value of an output to the output value of a step.',
    )


class OutputsComposite1(
    RootModel[Dict[constr(pattern=r'^[_a-zA-Z][a-zA-Z0-9_-]*$'), OutputsComposite]]
):
    root: Dict[constr(pattern=r'^[_a-zA-Z][a-zA-Z0-9_-]*$'), OutputsComposite] = Field(
        ...,
        description="Output parameters allow you to declare data that an action sets. Actions that run later in a workflow can use the output data set in previously run actions. For example, if you had an action that performed the addition of two inputs (x + y = z), the action could output the sum (z) for other actions to use as an input.\nIf you don't declare an output in your action metadata file, you can still set outputs and use them in a workflow.",
    )


class Action(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='The name of your action. GitHub displays the `name` in the Actions tab to help visually identify actions in each job.',
    )
    author: Optional[str] = Field(None, description="The name of the action's author.")
    description: str = Field(..., description='A short description of the action.')
    inputs: Optional[Dict[constr(pattern=r'^[_a-zA-Z][a-zA-Z0-9_-]*$'), Inputs]] = (
        Field(
            None,
            description='Input parameters allow you to specify data that the action expects to use during runtime. GitHub stores input parameters as environment variables. Input ids with uppercase letters are converted to lowercase during runtime. We recommended using lowercase input ids.',
        )
    )
    outputs: Optional[Any] = None
    runs: Union[RunsJavascript, RunsComposite, RunsDocker]
    branding: Optional[Branding] = Field(
        None,
        description='You can use a color and Feather icon to create a badge to personalize and distinguish your action. Badges are shown next to your action name in GitHub Marketplace.',
    )
